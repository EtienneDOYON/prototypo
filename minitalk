/* Ce dossier comprends les fichiers qui sont utilisés, dans le language C, pour créer un "minitalk". Ce programme permet
à deux terminaux de communiquer entre eux.
Pour compiler, executer la commande "make", qui appelera le fichier "Makefile".
Deux executables seront ensuite disponibles, un dans le dossier 'client', et un dans le dossier 'server'.
Executer le serveur avec la commande ./server (une fois dans le fichier server) permet d'obtenir un PID, une adresse
de programme.
Executer ensuite le client (une fois dans le dossier client) en utilisant ./client PID message.
Le PID a rentrer est celui obtenu précédemment. Le message est une chaine de caractères.
Le programme va envoyer ce message sous formes de signaux au server, qui affichera alors le message.
Les seuls signaux utilisés sont SIGUSR1 et SIGUSR2. */

-------------------FICHIER "affichage.c"------------------

void    my_putchar(char c) 
{ 
  write(1, &c, 1); 
} 
 
void    my_putnbr(int c) 
{ 
  if (c > 9) 
    { 
      my_putnbr(c / 10); 
      my_putchar(c % 10 + 48); 
    } 
  else 
    my_putchar(c + 48); 
} 
 
-----------------------FICHIER "client.c"-------------------------

#include <signal.h> 
 
void    my_putchar(char c) 
{ 
  write(1, &c, 1); 
} 
 
int     my_getnbr(char *str) 
{ 
  int   i; 
  int   j; 
 
  j = 0; 
  i = 0; 
  while (str[i]) 
    { 
      j = j * 10 + str[i] - 48; 
      i = i + 1; 
    } 
  return (j); 
} 
 
int     main(int ac, char **av) 
{ 
  int   pid; 
  int   i; 
  int   j; 
  char  t; 
  int   binaire[9]; 
 
  if (ac != 3) 
    return (-1); 
  i = 0; 
  pid = my_getnbr(av[1]); 
  while (av[2][i]) 
    { 
      t = av[2][i]; 
      while (t != '\0') 
        { 
          kill(pid, SIGUSR1); 
          usleep(200); 
          t = t - 1; 
        } 
      kill(pid, SIGUSR2); 
      i = i + 1; 
    } 
} 
 
-------------------------------FICHIER "Makefile"--------------------------

CC      = cc -Iinclude 
 
NAME    = server/server 
 
RM      = rm -f 
 
CFLAG   = -W -Wall -Werror 
 
LIB     = -lmy -L./lib 
 
SRC     = affichage.c \ 
          server.c \ 
 
OBJ     = $(SRC:.c=.o) 
 
NAME2   = client/client 
 
SRC2    = client.c 
 
OBJ2    = $(SRC2:.c=.o) 
 
all:      $(NAME) $(NAME2) 
 
$(NAME):  $(OBJ) $(OBJ2) 
          $(CC) $(OBJ) -o $(NAME) $(CFLAG) 
          $(CC) $(OBJ2) -o $(NAME2) $(CFLAG) 
 
clean: 
          $(RM) $(OBJ) 
          $(RM) $(OBJ2) 
 
fclean:   clean 
          $(RM) $(NAME) 
          $(RM) $(NAME2) 
 
re:       fclean all 
 
------------------------------FICHIER "server.c"---------------------

#include <signal.h> 
 
int     global; 
 
void    my_un() 
{ 
  global = global + 1; 
} 
 
void    my_zero() 
{ 
  my_putchar(global); 
  global = 0; 
} 
 
int     main(int ac, char **av) 
{ 
  int   i; 
 
  i = fork(); 
  if (i == 0) 
    { 
      global = 0; 
      while (42) 
        { 
          signal(SIGUSR1, my_un); 
          signal(SIGUSR2, my_zero); 
        } 
    } 
  else 
    { 
      my_putnbr(i); 
      my_putchar('\n'); 
    } 
} 
 
--------------------------------------------------------------
Ne pas oublier de créer deux dossiers vides, nommés respectivement server et client.
